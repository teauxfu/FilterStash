@using System.Diagnostics

<Acrylic BackgroundRgba="rgba(255,255,255,.3)">

    @if(Package is null)
    {
        <p>loading...</p>
    }
    else {
        <div style="display:flex; flex-direction: column; justify-content: space-between; ">
            <h3><b>@Package.Name</b> package details</h3>
            <ul>
                <li>
                    Source: <a href=@Package.Source target="_blank">@Package.Source</a>
                </li>
                <li>
                    Last updated: @(Package.LastUpdated?.ToString() ?? "never")
                </li>
            </ul>
        </div>
        <div style="display:flex; gap: 3px;">
            @if (!string.IsNullOrWhiteSpace(Package.ReadMeHtml))
            {
                string readmeId = $"readme_{Package.Hash}";
                <button popovertarget=@readmeId>📑 show readme</button>
                <div popover id=@readmeId>
                    @(new MarkupString(Package.ReadMeHtml))
                </div>
            }
            else
            {
                <span title="no ReadMe was available">--</span>
            }
            <button @onclick=@HandleOpenPackageFolder>📂 open local folder</button>
            <button @onclick=@(async() => await HandleOnRedownloadPackage(Package.Name))>♻ re-download files</button>
           @*  
               SHA is unreliable for files after dl due to metadata
               @{
                string hashId = $"hash_{Package.Hash}";
            }
            <button popovertarget=@hashId>#️⃣ show hash</button>
            <div popover id=@hashId>
                <p>
                    Here's the hash for all the contents in <bold>@Package.Name</bold>.
                </p>
                <code>@Package.Hash</code>
            </div> *@
        </div>

        @if (Package.Items is not null)
        {
            <QuickGrid @ref=@_contentsGrid Items=@GetOrderedPackageItems(Package)>
                <TemplateColumn Title="Item">
                    <div style="text-align: left;">
                        @if (isPriorityFile(context.Name))
                        {
                            <a target="_blank" href=@context.HtmlUrl>
                                <b>
                                    @context.Name
                                </b>
                            </a>
                        }
                        else
                        {
                            <a target="_blank" href=@context.HtmlUrl>
                                @context.Name
                            </a>
                        }
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="File size" SortBy=@(GridSort<PackageItem>.ByAscending(i => i.Size))>
                    <span>@Utils.FormatFileSize(context.Size)</span>
                </TemplateColumn>
                @* 
                SHA seems unreliable after dl due to metadata
                <TemplateColumn Title="SHA">
                    <code>@context.Sha</code>
                </TemplateColumn> *@
            </QuickGrid>
        }
    }
</Acrylic>


@code {
    QuickGrid<PackageItem>? _contentsGrid;
    [Parameter, EditorRequired] public Package? Package { get; set; }
    [Parameter] public EventCallback<string> OnUpdatePackage { get; set; }
    [Parameter] public EventCallback<string> OnRedownloadPackage { get; set; }

    async Task HandleOnUpdatePackage(string name)
    {
        if (OnUpdatePackage.HasDelegate)
            await OnUpdatePackage.InvokeAsync(name);
    }

    async Task HandleOnRedownloadPackage(string name)
    {
        if (OnRedownloadPackage.HasDelegate)
            await OnRedownloadPackage.InvokeAsync(name);
    }

    static bool isPriorityFile(string fileName)
                      => fileName.Equals("readme.md", StringComparison.OrdinalIgnoreCase)
                          | Path.GetExtension(fileName).Equals(".filter", StringComparison.OrdinalIgnoreCase);
    private static IQueryable<PackageItem> GetOrderedPackageItems(Package package) => (package.Items ?? [])
            .OrderBy(i => isPriorityFile(i.Name) ? 0 : 1)
            .ThenBy(i => i.Name)
            .AsQueryable();

    private void HandleOpenPackageFolder()
    {
        if(Package is not null)
        {
            string packageDir = Path.Combine(Utils.DefaultCachePath, Package.Name);
            Directory.CreateDirectory(packageDir);
            Process.Start("explorer.exe", packageDir);
        }
    }
}
