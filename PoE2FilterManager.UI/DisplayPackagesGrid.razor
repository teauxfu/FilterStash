@using PoE2FilterManager.Data.Services
@implements IAsyncDisposable
@implements IDisposable
@inject IIndexService IndexService


@if (Packages is null)
{
    <p><img src="_content/PoE2FilterManager.UI/images/book.gif" /> Loading...</p>
}
else
{
    <QuickGrid @ref=@_packagesGrid Items=@Packages>
        <TemplateColumn Title="Name">
            <div style="text-align: left; min-width: 200px;">
                @if (CurrentPackageName == context.Package.Name)
                {
                    <b>
                        <a target="_blank" href=@context.Package.Source title=@context.Package.Source>
                            @context.Package.Name
                        </a>
                    </b>
                }
                else
                {
                    <a target="_blank" href=@context.Package.Source title=@context.Package.Source>
                        @context.Package.Name
                    </a>
                }

            </div>
        </TemplateColumn>
        <TemplateColumn Title="Last updated">
            @if (context.Package.LastUpdated is not null)
            {
                <span>@context.Package.LastUpdated</span>
            }
            else
            {
                <span>never</span>
            }
        </TemplateColumn>
        <TemplateColumn>
            @if (context.Package.Name == GetCurrentlyInstalledPackageName())
            {
                <button onclick=@(async () => await HandleOnUninstallPackageAsync(context.Package.Name))>
                    ❌ uninstall
                </button>
            }
            else
            {
                <button onclick=@(async () => await HandleOnInstallPackageAsync(context.Package.Name))>
                    🛠 install
                </button>
            }
        </TemplateColumn>
        <TemplateColumn Class="button-column">
            <div>
                @if (CurrentPackageName != context.Package.Name)
                {
                    <button @onclick=@(async () => await HandleOnViewPackage(context.Package.Name))>🔍 view details</button>
                }
                else
                {
                    <button @onclick=@HandleOnCloseCurrentPackage>❌ close details</button>
                }
            </div>
        </TemplateColumn>
        <TemplateColumn Class="button-column">
            <button @onclick=@(async() => await HandleOnUpdatePackage(context.Package.Name))>
                <div style="display:flex; flex-direction: row; gap: 2px;">
                    📥 update package
                    @if(UpdatesPending.Contains(context.Package.Name))
                    {
                        <div class="ping-container" title="update available">
                            <div class="ping-animation"></div>
                            <div class="ping-circle"></div>
                        </div>
                    }
                </div>
            </button>
        </TemplateColumn>
        <TemplateColumn Class="button-column">
            <HeaderTemplate>
                <button @onclick=@HandleOnAddPackageAsync>
                    🆕 add new package
                </button>
            </HeaderTemplate>
            <ChildContent>
                <button @onclick=@(async () => await HandleOnDeletePackageAsync(context.Package.Name))>
                    🗑️ delete
                </button>
            </ChildContent>
        </TemplateColumn>
    </QuickGrid>
}

@code {
    // debugging, grid refs trying to mitigate js object disposal err on f5 reload

    QuickGrid<PackageDisplay>? _packagesGrid;

    [Parameter, EditorRequired] public IQueryable<PackageDisplay>? Packages { get; set; }
    [Parameter, EditorRequired] public string? CurrentPackageName { get; set; }
    [Parameter] public List<string> UpdatesPending { get; set; } = [];

    [Parameter] public EventCallback<string> OnViewPackage { get; set; }
    [Parameter] public EventCallback<string> OnUpdatePackage { get; set; }
    [Parameter] public EventCallback OnCloseCurrentPackage { get; set; }
    [Parameter] public EventCallback OnAddPackage { get; set; }
    [Parameter] public EventCallback<string> OnInstallPackage { get; set; }
    [Parameter] public EventCallback<string> OnUninstallPackage { get; set; }
    [Parameter] public EventCallback<string> OnDeletePackage { get; set; }


    string? GetCurrentlyInstalledPackageName()
    {
        // hack: we shouldn't use the index service from here directly
        // but we need a cheap way to get the currently installed package

        var index = IndexService.ReadIndex();
        return index.CurrentlyInstalledPackage;
    }

    async Task HandleOnViewPackage(string name)
    {
        if (OnViewPackage.HasDelegate)
            await OnViewPackage.InvokeAsync(name);
    }

    async Task HandleOnUpdatePackage(string name)
    {
        if (OnUpdatePackage.HasDelegate)
            await OnUpdatePackage.InvokeAsync(name);
    }

    async Task HandleOnCloseCurrentPackage()
    {
        if (OnCloseCurrentPackage.HasDelegate)
            await OnCloseCurrentPackage.InvokeAsync();
    }

    async Task HandleOnAddPackageAsync()
    {
        if (OnAddPackage.HasDelegate)
            await OnAddPackage.InvokeAsync();
    }

    async Task HandleOnInstallPackageAsync(string name)
    {
        if (OnInstallPackage.HasDelegate)
            await OnInstallPackage.InvokeAsync(name);
    }

    async Task HandleOnUninstallPackageAsync(string name)
    {
        if (OnUninstallPackage.HasDelegate)
            await OnUninstallPackage.InvokeAsync(name);
    }

    async Task HandleOnDeletePackageAsync(string name)
    {
        if (OnDeletePackage.HasDelegate)
            await OnDeletePackage.InvokeAsync(name);
    }

    // idisposable
    bool disposedValue;
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        // shouldn't have to do this... some kind of js bug in quickgrid or webview i guess
        try
        {
            if (_packagesGrid is not null)
                await _packagesGrid.DisposeAsync();
        }
        catch (JSException)
        {
            // pass
        }

        // Dispose of unmanaged resources.
        Dispose(false);

        // Suppress finalization.
        GC.SuppressFinalize(this);
    }

    void IDisposable.Dispose()
    {
        // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                // TODO: dispose managed state (managed objects)
            }

            // TODO: free unmanaged resources (unmanaged objects) and override finalizer
            // TODO: set large fields to null
            disposedValue = true;
        }
    }
}
