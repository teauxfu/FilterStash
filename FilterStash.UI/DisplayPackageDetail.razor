@using System.Diagnostics
@using Microsoft.AspNetCore.Components.QuickGrid

<Acrylic BackgroundRgba="rgba(255,255,255,.3)">

    @if (Package is null)
    {
        <p>loading...</p>
    }
    else
    {
        <div style="display:flex; flex-direction: column; justify-content: space-between; ">
            <h3><b>@Package.Name</b> package details</h3>
            <ul>
                @if (UpdatePending.Contains(Package.Name))
                {
                    <li>
                        <b>It looks like there's an update available for this package.</b>
                    </li>
                }
                @if (Package.SourceIsGitHub)
                {

                    <li>
                        Source: <a href=@Package.Source target="_blank">@Package.Source</a>
                    </li>
                    <li>
                        Last commit sha: <code>@Package.LastCommitSha</code>
                    </li>
                }
                <li>
                    Local files last updated: @(Package.LastUpdated?.ToString() ?? "never")
                </li>
            </ul>
        </div>
        <div id="detail-buttons-container" style="display:flex; gap: 3px;">
            @if (!string.IsNullOrWhiteSpace(Package.ReadMeHtml))
            {
                string readmeId = $"readme_{Package.ContentsHash}";
                <button popovertarget=@readmeId>📑 show readme</button>
                <div popover id=@readmeId>
                    @(new MarkupString(Package.ReadMeHtml))
                </div>
            }
            <button @onclick=@HandleOpenPackageFolder>📂 open local folder</button>
            @if (Package.SourceIsGitHub)
            {
                <button @onclick=@(async() => await HandleOnRedownloadPackageAsync(Package.Name))>♻ re-download files</button>
            }

            <button @onclick=@HandleSoundbites> 🔊 assign soundbites</button>

            @*  
               SHA is unreliable for files after dl due to metadata
               @{
                string hashId = $"hash_{Package.Hash}";
            }
            <button popovertarget=@hashId>#️⃣ show hash</button>
            <div popover id=@hashId>
                <p>
                    Here's the hash for all the contents in <bold>@Package.Name</bold>.
                </p>
                <code>@Package.Hash</code>
            </div> *@
        </div>

        @if(filter is not null)
        {
            <div style="overflow-x: auto; max-height: 700px; display: flex; flex-direction: column; white-space: pre-line;">
                    <p>Filter summary</p>
                @foreach(var segment in filter.Segments)
                {
                if (segment is ShowSegment show && !string.IsNullOrWhiteSpace(show.CustomSoundAlert))
                    {
                        <ul style="border: 1px solid grey; border-radius: 0.5rem;">
                            <li>@show.Rarity</li>
                            <li>@show.BaseType</li>
                            <li>@show.CustomSoundAlert</li>
                        </ul>
                    }
                }
            </div>
        }

        @if (Package.Items is not null)
        {
            <QuickGrid @ref=@_contentsGrid Items=@GetOrderedPackageItems(Package)>
                <TemplateColumn Title="Item">
                    <div style="text-align: left;">
                        @if (isPriorityFile(context.Name))
                        {
                            <a target="_blank" href=@context.HtmlUrl>
                                <b>
                                    @context.Name
                                </b>
                            </a>
                        }
                        else
                        {
                            <a target="_blank" href=@context.HtmlUrl>
                                @context.Name
                            </a>
                        }
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="File size" SortBy=@(GridSort<PackageItem>.ByAscending(i => i.Size))>
                    <span>@Utils.FormatFileSize(context.Size)</span>
                </TemplateColumn>
                @* 
                SHA seems unreliable after dl due to metadata
                <TemplateColumn Title="SHA">
                    <code>@context.Sha</code>
                </TemplateColumn> *@
            </QuickGrid>
        }
    }
</Acrylic>
